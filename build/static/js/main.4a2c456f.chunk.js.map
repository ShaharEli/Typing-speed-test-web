{"version":3,"sources":["components/header/Header.js","components/game/Game.js","components/Test/Test.js","App.js","serviceWorker.js","index.js"],"names":["Header","fade","useSpring","from","opacity","transform","to","config","duration","header","style","id","Game","end","useState","time","setTime","word","setWord","loading","setLoading","len","setLen","types","setTypes","check","current","grade","split","filter","item","i","length","Swal","fire","Math","round","useEffect","randomWords","timerInterval","setInterval","prev","clearInterval","div","className","map","color","fontSize","key","TextField","onChange","e","target","value","type","placeholder","marginTop","onKeyUp","keyCode","Button","onClick","variant","Test","gameCounter","setGameCounter","gameStart","setGameStart","startBtnDisplay","setStartBtnDisplay","history","setHistory","height","display","data","concat","index","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.4a2c456f.chunk.js","sourcesContent":["import React from 'react'\r\nimport \"./Header.css\"\r\nimport {useSpring, animated} from \"react-spring\"\r\n\r\nfunction Header() {\r\n    const fade = useSpring({\r\n        from:{\r\n            opacity:0,\r\n            transform: \"translateY(-20vh)\"\r\n        },\r\n        to:{\r\n            opacity:1,\r\n            transform: \"translateY(0vh)\"\r\n        },config:{duration:1000}\r\n    })\r\n    return (\r\n        <animated.header style={fade}>\r\n            <h2 id=\"headerTitle\">Typing Speed Test</h2>\r\n        </animated.header>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./Game.css\";\r\nimport { useSpring, animated } from \"react-spring\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport Swal from \"sweetalert2\";\r\nimport randomWords from \"random-words\";\r\n\r\nfunction Game({ end }) {\r\n  const [time, setTime] = useState(0);\r\n  const [word, setWord] = useState(\"\");\r\n  const [loading, setLoading] = useState(true);\r\n  const [len, setLen] = useState(0);\r\n  const [types, setTypes] = useState(\"\");\r\n  const check = () => {\r\n    const current = time;\r\n    const grade = types.split(\"\").filter((item, i) => item === word[i]);\r\n    if (grade.length / word.length === 1) {\r\n      Swal.fire(\r\n        \"you got: \" +\r\n          grade.length +\r\n          \" / \" +\r\n          word.length +\r\n          \" (\" +\r\n          Math.round((grade.length / word.length) * 100) +\r\n          \"%)\",\r\n        `your time is: ${current} seconds`,\r\n        \"success\"\r\n      );\r\n    } else if (grade.length === 0) {\r\n      Swal.fire(\r\n        \"you got: \" +\r\n          grade.length +\r\n          \" / \" +\r\n          word.length +\r\n          \" (\" +\r\n          Math.round((grade.length / word.length) * 100) +\r\n          \"%)\",\r\n        `your time is: ${current} seconds`,\r\n        \"error\"\r\n      );\r\n    } else {\r\n      Swal.fire(\r\n        \"you got: \" +\r\n          grade.length +\r\n          \" / \" +\r\n          word.length +\r\n          \" (\" +\r\n          Math.round((grade.length / word.length) * 100) +\r\n          \"%)\",\r\n        `your time is: ${current} seconds`\r\n      );\r\n    }\r\n\r\n    end({ grade: grade.length, word: word, time: time });\r\n  };\r\n  useEffect(() => {\r\n    setWord(randomWords());\r\n    setLoading(false);\r\n    const timerInterval = setInterval(() => setTime((prev) => prev + 1), 1000);\r\n    return clearInterval(timerInterval);\r\n  }, []);\r\n  const fade = useSpring({\r\n    from: {\r\n      opacity: 0,\r\n    },\r\n    to: {\r\n      opacity: 1,\r\n    },\r\n    config: { duration: 1000 },\r\n  });\r\n  const type = (e) => {\r\n    setTypes(e.target.value);\r\n  };\r\n  useEffect(() => {\r\n    setLen(types.length);\r\n  }, [types]);\r\n  return (\r\n    <animated.div style={fade} className='testModal'>\r\n      {loading ? (\r\n        <div className='load'>\r\n          <div className='windows8'>\r\n            <div className='wBall' id='wBall_1'>\r\n              <div className='wInnerBall'></div>\r\n            </div>\r\n            <div className='wBall' id='wBall_2'>\r\n              <div className='wInnerBall'></div>\r\n            </div>\r\n            <div className='wBall' id='wBall_3'>\r\n              <div className='wInnerBall'></div>\r\n            </div>\r\n            <div className='wBall' id='wBall_4'>\r\n              <div className='wInnerBall'></div>\r\n            </div>\r\n            <div className='wBall' id='wBall_5'>\r\n              <div className='wInnerBall'></div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <>\r\n          <div className='seconds'>timer: {time}</div>\r\n          <div className='word'>\r\n            you need to type:{\" \"}\r\n            {word.split(\"\").map((item, i) => (\r\n              <span\r\n                style={\r\n                  len === i\r\n                    ? { color: \"green\", fontSize: 40 }\r\n                    : { color: \"blue\" }\r\n                }\r\n                key={i}\r\n              >\r\n                {item}\r\n              </span>\r\n            ))}\r\n          </div>\r\n          <div>\r\n            <TextField\r\n              onChange={(e) => type(e)}\r\n              placeholder={\"Type...\"}\r\n              style={{ marginTop: 20 }}\r\n              onKeyUp={(e) => {\r\n                if (e.keyCode === 13) {\r\n                  check();\r\n                }\r\n              }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Button\r\n              onClick={check}\r\n              style={{ marginTop: 50 }}\r\n              variant='contained'\r\n              color='secondary'\r\n            >\r\n              Submit\r\n            </Button>\r\n          </div>\r\n        </>\r\n      )}\r\n    </animated.div>\r\n  );\r\n}\r\n\r\nexport default Game;\r\n","import React, { useState } from 'react'\r\nimport \"./Test.css\"\r\nimport Button from \"@material-ui/core/Button\"\r\nimport Game from '../game/Game'\r\nfunction Test() {\r\n    const [gameCounter, setGameCounter] = useState(0)\r\n    const [gameStart, setGameStart] = useState(false)\r\n    const [startBtnDisplay, setStartBtnDisplay] = useState(\"block\")\r\n    const [history,setHistory] = useState([])\r\n    const start = ()=>{\r\n        setGameCounter(prev=>prev+1)\r\n        setGameStart(true)\r\n        setStartBtnDisplay(\"none\")\r\n    }\r\n    const end = (data) => {\r\n        setGameStart(false)\r\n        setStartBtnDisplay(\"block\")\r\n        setHistory(prev=>prev.concat([data]))\r\n    }\r\n    return (\r\n        <>\r\n        <div id=\"gameCounter\">game number: {gameCounter}</div>\r\n        <div id=\"test\">\r\n            <Button onClick={start} style={{height:40, display:startBtnDisplay}} variant=\"contained\" color=\"primary\">\r\n                Start Test\r\n            </Button>\r\n            {\r\n                gameStart&&<Game end={end} />\r\n            }\r\n        </div>\r\n        {\r\n            history.length>0&&<div className=\"scores\">\r\n                {\r\n                    history.map((item,index)=>{\r\n                   return   <div className=\"records\" key={index}>\r\n                       <div>\r\n                           grade:{item.grade}/{item.word.length} ({Math.round(item.grade/item.word.length)*100}%)\r\n                        </div>\r\n                        <div>\r\n                        word: {item.word}\r\n                        </div>\r\n                        <div>\r\n                         time: {item.time} seconds\r\n                         </div>\r\n                   </div>\r\n                    })\r\n                }\r\n        </div>\r\n}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Test\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Header from \"./components/header/Header\";\nimport Test from \"./components/Test/Test\";\n\nfunction App() {\n  return (\n    <div className='App'>\n      <Header />\n      <Test />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}